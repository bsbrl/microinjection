# -*- coding: utf-8 -*-
"""
Created on Tue Aug 18 20:47:05 2020

@author: admin
"""


import numpy as np


def transformation_DSLR_4x(x,y):
    # P1 = [3043, 2129]
    # P2 = [2830, 1906]
    # P3 = [2984, 2043]
    # X_Y_1 = [16.893, 15.147]
    # X_Y_2 = [20.919, 18.838]
    # X_Y_3 = [18.438, 16.150]
    # P1 = [3002, 1341/(np.cos(5*np.pi/180))]
    # P2 = [3283, 1701/(np.cos(5*np.pi/180))]
    # P3 = [3471, 1921/(np.cos(5*np.pi/180))]
    # X_Y_1 = [26.419, 15.152]
    # X_Y_2 = [19.983, 10.381]
    # X_Y_3 = [16.016, 7.1640]
    # P1 = [3119, 3683]
    # P2 = [2487, 432]
    # P3 = [4646, 2314]
    # X_Y_1 = [-17.44, 14.110]
    # X_Y_2 = [41.019, 24.372]
    # X_Y_3 = [6.469, -13.507]
    # P1 = [1374, 1117]
    # P2 = [3244, 361]
    # P3 = [3100, 3390]
    # X_Y_1 = [-57, 41.1]
    # X_Y_2 = [-44.6, 8.4]
    # X_Y_3 = [-97.3, 11.9]
    
    P1 = [2695, 127]
    P2 = [2907, 3397]
    P3 = [3335, 1441]
    X_Y_1 = [-39.84, 17.76]
    X_Y_2 = [-96.85, 15.35]
    X_Y_3 = [-62.85, 7.10]

    X_Y = np.matrix([[x],
                     [y]])
    A = np.matrix([[P1[0], P1[1], 1],
                   [P2[0], P2[1], 1],
                   [P3[0], P3[1], 1]])
    B = np.matrix([[X_Y_1[0], X_Y_1[1]],
                   [X_Y_2[0], X_Y_2[1]],
                   [X_Y_3[0], X_Y_3[1]]])
    cons = np.dot(np.linalg.inv(A),B)
    # print(cons)
    C = np.matrix([[cons[0,0], cons[1,0]],
                   [cons[0,1], cons[1,1]]])
    D = np.matrix([[cons[2,0]],
                   [cons[2,1]]])
    new_X_Y = np.add(np.dot(C,X_Y), D)
    return (new_X_Y[0,0], new_X_Y[1,0])

def transformation_DSLR_inj(x,y,dish_num):
    # Constant numbers from Calibration    
    if dish_num == 1:
        # P1 = [3974, 771]
        # P2 = [2275, 3454]
        # P3 = [2501, 1948]
        # X_Y_1 = [-21.55, 32.75]
        # X_Y_2 = [-67.0, 66.1]
        # X_Y_3 = [-40.65, 60.4]
        
        # P1 = [2950, 1291]
        # P2 = [2180, 3222]
        # P3 = [3575, 370]
        # X_Y_1 = [-29.95, 51.74]
        # X_Y_2 = [-63.39, 67.84]
        # X_Y_3 = [-14.50, 39.55]
        
        # P1 = [2105, 1185]
        # P2 = [4346, 1806]
        # P3 = [3352, 2678]
        # X_Y_1 = [-26.79, 66.78]
        # X_Y_2 = [-40.77, 27.40]
        # X_Y_3 = [-55.31, 46.38]
        
        # P1 = [2487, 810]
        # P2 = [1539, 1685]
        # P3 = [3853, 2427]
        # X_Y_1 = [-21.58, 59.43]
        # X_Y_2 = [-35.83, 77.29]
        # X_Y_3 = [-51.59, 37.36]
        
        # P1 = [4468, 2417]
        # P2 = [1363, 1729]
        # P3 = [1742, 3072]
        # X_Y_1 = [-52.3, 27.4]
        # X_Y_2 = [-36.4, 81.5]
        # X_Y_3 = [-60.6, 76.4]
        
        P1 = [3938, 669]
        P2 = [2379, 3439]
        P3 = [3777, 3466]
        X_Y_1 = [-21.04, 34.56]
        X_Y_2 = [-68.34, 65.56]
        X_Y_3 = [-70.54, 40.96]
        
    if dish_num == 2:
        # P1 = [1722, 1380]
        # P2 = [4786, 2215]
        # P3 = [3276, 2443]
        # X_Y_1 = [45.45, 0.65]
        # X_Y_2 = [26.85, -52.65]
        # X_Y_3 = [24.60, -25.75]
        
        # P1 = [2332, 965]
        # P2 = [3239, 2521]
        # P3 = [4291, 1697]
        # X_Y_1 = [52.02, -10.33]
        # X_Y_2 = [22.85, -24.72]
        # X_Y_3 = [36.40, -44.72]
        
        # P1 = [2279, 1269]
        # P2 = [3854, 3372]
        # P3 = [3475, 1524]
        # X_Y_1 = [46.1, -9.39]
        # X_Y_2 = [6.95, -34.63]
        # X_Y_3 = [40.13, -30.23]
        
        # P1 = [1479, 1682]
        # P2 = [4557, 2469]
        # P3 = [1816, 3038]
        # X_Y_1 = [39.50, 6.30]
        # X_Y_2 = [21.90, -47.3]
        # X_Y_3 = [15.00, 1.9]
        
        P1 = [4021, 661]
        P2 = [2528, 3461]
        P3 = [3926, 3455]
        X_Y_1 = [54, -39.9]
        X_Y_2 = [6.1, -10.1]
        X_Y_3 = [4.4, -34.7]

    X_Y = np.matrix([[x],
                     [y]])
    A = np.matrix([[P1[0], P1[1], 1],
                   [P2[0], P2[1], 1],
                   [P3[0], P3[1], 1]])
    B = np.matrix([[X_Y_1[0], X_Y_1[1]],
                   [X_Y_2[0], X_Y_2[1]],
                   [X_Y_3[0], X_Y_3[1]]])
    cons = np.dot(np.linalg.inv(A),B)
    # print(cons)
    C = np.matrix([[cons[0,0], cons[1,0]],
                   [cons[0,1], cons[1,1]]])
    D = np.matrix([[cons[2,0]],
                   [cons[2,1]]])
    new_X_Y = np.add(np.dot(C,X_Y), D)
    return (new_X_Y[0,0], new_X_Y[1,0])
    
# (x,y) = transformation_DSLR_4x(2907, 3397)
# print(x,y)
# (x,y) = transformation_DSLR_inj(2566, 1519, 1)
# print(x,y)
# (x,y) = transformation_DSLR_inj(1539, 1685, 1)
# print(x,y)
# (x,y) = transformation_DSLR_inj(2681, 1810, 2)
# print(x,y)